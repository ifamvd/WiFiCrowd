<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>WiFi Crowd | @ViewData["Title"]</title>

    <link rel="stylesheet" href="~/css/site.css" />
    <!-- Bootstrap 4.3 -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <!-- Fontawesome 5.7.2 -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">

    <!-- Needed JavaScript -->
    <script>
        var map, input, searchBox;

        // Initialize Map
        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 36.5570923, lng: -100.0461335 },
                zoom: 4,
                mapTypeId: 'roadmap'
            });
            var clickHandler = new ClickEventHandler(map);
        }

        /**
        * constructor
        */
        var ClickEventHandler = function(map) {
            this.map = map;
            this.placesService = new google.maps.places.PlacesService(map);
            // Listen for clicks on the map.
            this.map.addListener('click', this.handleClick.bind(this));
        };

        ClickEventHandler.prototype.handleClick = function (event) {
            // DEBUG BELOW - check if clicking working
            console.log('You clicked on: ' + event.latLng);
            // DEBUG ABOVE

            // If the event has a placeId, use it.
            if (event.placeId) {

                // DEBUG BELOW - check if clicking POI works
                console.log('You clicked on place:' + event.placeId);
                // DEBUG ABOVE

                // Calling e.stop() on the event prevents the default info window from
                // showing.
                // If you call stop here when there is no placeId you will prevent some
                // other map click event handlers from receiving the event.
                event.stop();
                this.getPlaceInformation(event.placeId);
            }
        };

        ClickEventHandler.prototype.getPlaceInformation = function(placeId) {
            var me = this;
            this.placesService.getDetails({placeId: placeId}, function(place, status) {
                if (status === 'OK') {
                    if (document.getElementById('name') !== null) {
                        document.getElementById('name').value = place.name;
                        document.getElementById('address').value = place.formatted_address;
                        document.getElementById('lat').value = place.geometry.location.lat();
                        document.getElementById('lng').value = place.geometry.location.lng();
                        document.getElementById('url').value = place.url;
                        document.getElementById('name').disabled = false;
                        document.getElementById('address').disabled = false;
                        document.getElementById('lat').disabled = false;
                        document.getElementById('lng').disabled = false;
                        document.getElementById('url').disabled = false;
                    }
                }
            });
        };

        function initSearch() {
            // Create seach box
            input = document.getElementById('map-search');
            searchBox = new google.maps.places.SearchBox(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function () {
                searchBox.setBounds(map.getBounds());
            });

            var markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function () {
                var places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }

                if (document.getElementById('name') !== null) {
                    if (places.length == 1) {
                        var mainPlace = places[0];
                        document.getElementById('name').value = mainPlace.name;
                        document.getElementById('address').value = mainPlace.formatted_address;
                        document.getElementById('lat').value = mainPlace.geometry.location.lat();
                        document.getElementById('lng').value = mainPlace.geometry.location.lng();
                        document.getElementById('url').value = mainPlace.url;
                        document.getElementById('name').disabled = false;
                        document.getElementById('address').disabled = false;
                        document.getElementById('lat').disabled = false;
                        document.getElementById('lng').disabled = false;
                        document.getElementById('url').disabled = false;
                    }
                }

                // Clear out the old markers.
                markers.forEach(function (marker) {
                    marker.setMap(null);
                });
                markers = [];

                // For each place, get the icon, name and location.
                var bounds = new google.maps.LatLngBounds();
                places.forEach(function (place) {
                    if (!place.geometry) {
                        console.log("Returned place contains no geometry");
                        return;
                    }
                    /* - No need to show icons - might clash with WiFi icons
                    var icon = {
                        url: place.icon,
                        size: new google.maps.Size(85, 85),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(35, 35)
                    };
                    // Create a marker for each place.
                    markers.push(new google.maps.Marker({
                        map: map,
                        //icon: icon,
                        title: place.name,
                        position: place.geometry.location
                    }));
                    */

                    var cluster_marker = new google.maps.Marker({
                        map: map,
                        title: place.name,
                        position: place.geometry.location
                    })

                    var cluster_infowindow = new google.maps.InfoWindow({
                        content: "<div class='map-info-content'><h4>" + place.name + "</h4><p>Address:<br />\"" + place.formatted_address + "\"</p><p><a href='" + place.url + "'>Open in Google Maps</a></p></div>"
                    });

                    cluster_marker.addListener('click', function () {
                        // populate form
                        document.getElementById('name').value = place.name;
                        document.getElementById('address').value = place.formatted_address;
                        document.getElementById('lat').value = place.geometry.location.lat();
                        document.getElementById('lng').value = place.geometry.location.lng();
                        document.getElementById('url').value = place.url;
                        document.getElementById('name').disabled = false;
                        document.getElementById('address').disabled = false;
                        document.getElementById('lat').disabled = false;
                        document.getElementById('lng').disabled = false;
                        document.getElementById('url').disabled = false;
                        // show infowindow
                        cluster_infowindow.open(map, cluster_marker);
                    });

                    markers.push(cluster_marker);

                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });
                map.fitBounds(bounds);
            });
        }

        // Location request.
        var x = document.getElementById("location");
        var marker;
        function getLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showPosition);
            } else {
                x.innerHTML = "Geolocation is not supported by this browser.";
            }
        }

        // Update map based on location request.
        function showPosition(position) {
            map.setCenter({ lat: position.coords.latitude, lng: position.coords.longitude });
            map.setZoom(13);
            var geolocation = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
            };
            var circle = new google.maps.Circle(
                {
                    center: geolocation,
                    radius: position.coords.accuracy
                }
            );
            searchBox.setBounds(circle.getBounds());
            /*
            // Put marker of the location request result.
            marker = new google.maps.Marker({
                position: { lat: position.coords.latitude, lng: position.coords.longitude },
                map: map
            });
            */
            populate();
        }

        //Add from DB
        function addMarker(name, address, lat, lng, url, password) {
            var icon_wifi = {
                url: "/img/wifi-icon.png",
                // size: new google.maps.Size(300, 300),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(15, 30),
                scaledSize: new google.maps.Size(30, 30)
            };
            var infowindow = new google.maps.InfoWindow({
                content: "<div class='map-info-content'><h4>" + name + "</h4><p>WiFi password:<br />\"" + password + "\"</p><p><a href='" + url + "'>Open in Google Maps</a></p></div>"
            });
            var spot_marker = new google.maps.Marker({
                title: name,
                position: { lat: lat, lng: lng },
                icon: icon_wifi,
                map: map
            });
            // DEBUG BELOW - somehow stuff from DB not showing
            console.log("It is called by: " + name);
            // DEBUG ABOVE
            spot_marker.addListener('click', function () {
                infowindow.open(map, spot_marker);
            });
            spot_marker.addListener('dblclick', function () {
                map.setCenter(spot_marker.getPosition());
                map.setZoom(17);
            });
        }

    </script>

</head>
<body>
    <header>

        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">WiFi Crowd</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav mr-auto">
                    <li class="nav-item">
                        <a class="nav-link" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            WiFi Spots
                        </a>
                        <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                            <a class="dropdown-item" asp-area="" asp-controller="Home" asp-action="AddSpot">Add</a>
                            <a class="dropdown-item" asp-area="" asp-controller="Home" asp-action="RemoveSpot">Remove</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="/">Go Back Home</a>
                        </div>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link disabled" href="#">Login (Disabled)</a>
                    </li>
                </ul>
                <div class="form-inline my-2 my-lg-0">
                    <input id="map-search" class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
                    <button type="button" class="btn btn-info" onclick="getLocation()">Find Around Me</button>
                </div>
            </div>
        </nav>

    </header>

    <div class="container">
        <partial name="_CookieConsentPartial" />
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; @DateTime.Now.Year - WiFi Crowd - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>

    <!-- Google Maps API access -->
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA3KaAVv6Mizfw9_YC-0GDnZ11JsYy38i0&libraries=places&callback=initGmaps" async defer></script>
    <!-- Site JS -->
    <script src="~/js/site.js" asp-append-version="true"></script>
    <!-- JQuery -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <!-- Popper -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <!-- Bootstrap 4.3 -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
    @RenderSection("Scripts", required: false)
</body>
</html>
